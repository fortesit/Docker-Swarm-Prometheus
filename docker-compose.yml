version: '3.4'

services:
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          memory: 4096M
        reservations:
          memory: 128M

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    ports:
      - 3000:3000
    depends_on:
      - prometheus
      - cadvisor
      - node_exporter
    environment:
      GF_SECURITY_ADMIN_USER: "admin"
      GF_SECURITY_ADMIN_PASSWORD: "admin"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_USERS_ALLOW_ORG_CREATE: "false"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    restart: always
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M

  node_exporter:
    image: prom/node-exporter
    container_name: node_exporter
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M

  socat:
    image: alpine/socat
    container_name: socat
    command: ["tcp-listen:$PORT,fork", "tcp-connect:$DOCKER_GWBRIDGE_IP:$PORT"]
    environment:
      DOCKER_GWBRIDGE_IP: "${DOCKER_GWBRIDGE_IP}"
      PORT: "${PORT}"
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M